from random import choice
from turtle import *
from freegames import floor, vector

state = {'score': 0}
path = Turtle(visible=False)
writer = Turtle(visible=False)
aim = vector(5, 0)
pacman = vector(-40, -80)
ghosts = [
    [vector(-180, 160), vector(5, 0)],
    [vector(-180, -160), vector(0, 5)],
    [vector(100, 160), vector(0, -5)],
    [vector(100, -160), vector(-5, 0)],
]

tiles = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]

def square(x, y):
    "Draw square using path at (x, y)."
    path.up()
    path.goto(x, y)
    path.down()
    path.begin_fill()

    for count in range(4):
        path.forward(20)
        path.left(90)

    path.end_fill()

def offset(point):
    "Return offset of point in tiles."
    x = (floor(point.x, 20) + 200) / 20
    y = (180 - floor(point.y, 20)) / 20
    index = int(x + y * 20)
    return index

def valid(point):
    "Return True if point is valid in tiles."
    index = offset(point)
    if tiles[index] == 0:
        return False
    index = offset(point + 19)
    if tiles[index] == 0:
        return False
    return point.x % 20 == 0 or point.y % 20 == 0

def world():
    "Draw world using path."
    bgcolor('black')
    path.color('blue')

    for index in range(len(tiles)):
        tile = tiles[index]
        if tile > 0:
            x = (index % 20) * 20 - 200
            y = 180 - (index // 20) * 20
            square(x, y)

            if tile == 1:
                path.up()
                path.goto(x + 10, y + 10)
                path.dot(2, 'white')

def move():
    "Move pacman and all ghosts."
    writer.undo()
    writer.write(state['score'])

    clear()

    if valid(pacman + aim):
        pacman.move(aim)

    index = offset(pacman)
    if tiles[index] == 1:
        tiles[index] = 2
        state['score'] += 1
        x = (index % 20) * 20 - 200
        y = 180 - (index // 20) * 20
        square(x, y)

    up()
    goto(pacman.x + 10, pacman.y + 10)
    dot(20, 'yellow')

    # Movimiento inteligente de fantasmas
    for ghost in ghosts:
        point, course = ghost
        
        # Estrategias diferentes para cada fantasma
        ghost_index = ghosts.index(ghost)
        
        if ghost_index == 0:  # Fantasma 1: Persecución directa
            move_towards_pacman(ghost)
        elif ghost_index == 1:  # Fantasma 2: Intercepción
            move_to_intercept(ghost)
        elif ghost_index == 2:  # Fantasma 3: Patrón aleatorio mejorado
            move_random_smart(ghost)
        else:  # Fantasma 4: Patrulla estratégica
            move_strategic(ghost)
        
        point.move(course)
        
        # Verificar colisión con Pacman
        if abs(pacman - point) < 20:
            return

        up()
        goto(point.x + 10, point.y + 10)
        dot(20, 'red')

    update()

    ontimer(move, 100)

def move_towards_pacman(ghost):
    "Mueve el fantasma directamente hacia Pacman."
    point, course = ghost
    
    # Calcular dirección hacia Pacman
    dx = pacman.x - point.x
    dy = pacman.y - point.y
    
    # Elegir la dirección principal (horizontal o vertical) con mayor diferencia
    if abs(dx) > abs(dy):
        # Movimiento horizontal
        new_course = vector(5 if dx > 0 else -5, 0)
    else:
        # Movimiento vertical
        new_course = vector(0, 5 if dy > 0 else -5)
    
    # Verificar si la nueva dirección es válida
    if valid(point + new_course):
        ghost[1] = new_course
    else:
        # Si no es válida, intentar la otra dirección
        if abs(dx) > abs(dy):
            alternative = vector(0, 5 if dy > 0 else -5)
        else:
            alternative = vector(5 if dx > 0 else -5, 0)
        
        if valid(point + alternative):
            ghost[1] = alternative

def move_to_intercept(ghost):
    "Mueve el fantasma para interceptar a Pacman."
    point, course = ghost
    
    # Predecir posición futura de Pacman
    predicted_pos = pacman + aim * 3
    
    # Calcular dirección hacia la posición predicha
    dx = predicted_pos.x - point.x
    dy = predicted_pos.y - point.y
    
    # Elegir dirección
    if abs(dx) > abs(dy):
        new_course = vector(5 if dx > 0 else -5, 0)
    else:
        new_course = vector(0, 5 if dy > 0 else -5)
    
    if valid(point + new_course):
        ghost[1] = new_course
    else:
        # Fallback a movimiento aleatorio inteligente
        move_random_smart(ghost)

def move_random_smart(ghost):
    "Movimiento aleatorio pero evitando callejones sin salida."
    point, course = ghost
    
    # Lista de direcciones posibles
    options = [
        vector(5, 0), vector(-5, 0),
        vector(0, 5), vector(0, -5)
    ]
    
    # Filtrar direcciones válidas
    valid_options = [opt for opt in options if valid(point + opt)]
    
    # Preferir continuar en la misma dirección si es posible
    if course in valid_options and len(valid_options) > 1:
        ghost[1] = course
    elif valid_options:
        # Evitar cambiar de dirección frecuentemente
        if len(valid_options) > 1 and course in valid_options:
            ghost[1] = course
        else:
            ghost[1] = choice(valid_options)

def move_strategic(ghost):
    "Movimiento estratégico que patrulla áreas importantes."
    point, course = ghost
    
    # Posiciones estratégicas para patrullar
    strategic_points = [
        vector(-100, 100), vector(0, 100), vector(100, 100),
        vector(-100, 0), vector(0, 0), vector(100, 0),
        vector(-100, -100), vector(0, -100), vector(100, -100)
    ]
    
    # Encontrar el punto estratégico más cercano
    closest_point = min(strategic_points, 
                       key=lambda p: abs(p - point))
    
    # Mover hacia el punto estratégico
    dx = closest_point.x - point.x
    dy = closest_point.y - point.y
    
    if abs(dx) > abs(dy):
        new_course = vector(5 if dx > 0 else -5, 0)
    else:
        new_course = vector(0, 5 if dy > 0 else -5)
    
    if valid(point + new_course):
        ghost[1] = new_course
    else:
        move_random_smart(ghost)

def change(x, y):
    "Change pacman aim if valid."
    if valid(pacman + vector(x, y)):
        aim.x = x
        aim.y = y

setup(420, 420, 370, 0)
hideturtle()
tracer(False)
writer.goto(160, 160)
writer.color('white')
writer.write(state['score'])
listen()
onkey(lambda: change(5, 0), 'Right')
onkey(lambda: change(-5, 0), 'Left')
onkey(lambda: change(0, 5), 'Up')
onkey(lambda: change(0, -5), 'Down')
world()
move()
done()
